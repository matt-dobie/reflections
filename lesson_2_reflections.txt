What happens when you initialize a repository? Why do you need to do it?

    It sets up the hidden git folder, which contains the metadata used to
    track the history of the files in our directory. Without initialising,
    any other git commands will not work.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

    The staging area is the intermediate step between the working directory and 
    the repository - where files go when they are ready to be commited. It adds
    more flexibility and control in the commiting process

How can you use the staging area to make sure you have one commit per logical
change?

    You can use 'git diff' to compare the differences in your files between the
    working directory and the staging area, while 'git diff --staged' lets us
    compare between the staging area and the most recent commit. This allows us
    to determine exactly what changes we are commiting

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

    Branches would be helpful if you wanted to try and introduce a new 
    experimental feature into your project, but didn't want it to impact the
    main project yet. You could also use a branch to create various versions
    of your project (an easy mode in a game, or a version in a different
    language)

How do the diagrams help you visualize the branch structure?

    The diagrams help to higlight the reachability of each commit, and how 
    to easily traverse the history of the repo.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

    Merging combines the two branches together in a commit, and makes that the
    head of the branch we are currently in. It's helpful to represent this 
    process in a diagram so that we don't get confused, and accidentally lose 
    important commits.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

    Automatic merging would be faster, however, it doesn't provide the control
    that manually merging does. Manual merging allows the user to see exactly
    what changes need to be made when merging branches, to make sure you don't
    add or lose any code.