How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    It showed each specific line where there was a difference between the two
    files.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    If you decide to retract any changes you wan to make to a file, then you 
    wouldn't have to manually make those changes. This would save heaps of time!

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    Pros: Uneccessary automatic saves give too many versions which also takes
    up space. Manually can help you keep track of small but siginificant changes
    as you work.
    Cons: Manual is subject to user error. ie. if you forget to save...

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Tracking multiple files together makes sense for most coding projects
    (eg. website), where adding a single feature might require channges in 
    multiple files.

How can you use the commands git log and git diff to view the history of files?

    The command 'git log' shows a history of all commits in that repo. To look
    at what has changed specifically, we can use 'git diff' to show us exactly
    where these changes have been made by comparing two files.

How might using version control make you more confident to make changes that
could break something?

    You can always return to a previous working commit if a bug is introduced

Now that you have your workspace set up, what do you want to try using Git for?

    To use version control for developing my own portfolio website